@page "/users/login"
@inject IAuthenticationService authService
@inject NavigationManager _navManager

<h3>Login</h3>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>

        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new LoginUserDto();
    string message = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await authService.AuthenticateAsync(LoginModel);

            if (response)
            {
                _navManager.NavigateTo("/");
                return;
            }

            message = "Invalid credentials, please try again!";
        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
    }
}